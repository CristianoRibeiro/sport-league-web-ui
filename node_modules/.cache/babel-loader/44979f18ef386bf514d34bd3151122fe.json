{"ast":null,"code":"/**\n * A class representing a service that processes the data for match schedule\n * and generates leaderboard.\n * \n * NOTE: MAKE SURE TO IMPLEMENT ALL EXISITNG METHODS BELOW WITHOUT CHANGING THE INTERFACE OF THEM, \n *       AND PLEASE DO NOT RENAME, MOVE OR DELETE THIS FILE.  \n * \n *       ADDITIONALLY, MAKE SURE THAT ALL LIBRARIES USED IN THIS FILE FILE ARE COMPATIBLE WITH PURE JAVASCRIPT\n * \n */\nclass LeagueService {\n  constructor(apiUrl, token) {\n    this.apiUrl = apiUrl;\n    this.token = token;\n  }\n  /**\n   * Sets the match schedule.\n   * Match schedule will be given in the following form:\n   * [\n   *      {\n   *          matchDate: [TIMESTAMP],\n   *          stadium: [STRING],\n   *          homeTeam: [STRING],\n   *          awayTeam: [STRING],\n   *          matchPlayed: [BOOLEAN],\n   *          homeTeamScore: [INTEGER],\n   *          awayTeamScore: [INTEGER]\n   *      },\n   *      {\n   *          matchDate: [TIMESTAMP],\n   *          stadium: [STRING],\n   *          homeTeam: [STRING],\n   *          awayTeam: [STRING],\n   *          matchPlayed: [BOOLEAN],\n   *          homeTeamScore: [INTEGER],\n   *          awayTeamScore: [INTEGER]\n   *      }    \n   * ]\n   * \n   * @param {Array} matches List of matches.\n   */\n\n\n  async setMatches(matches) {\n    try {\n      const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(matches)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to set matches');\n      }\n    } catch (error) {\n      console.error('Error setting matches:', error);\n      throw error;\n    }\n  }\n  /**\n   * Returns the full list of matches.\n   * \n   * @returns {Array} List of matches.\n   */\n\n\n  async getMatches() {\n    try {\n      const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch matches');\n      }\n\n      const data = await response.json();\n      return data.matches;\n    } catch (error) {\n      console.error('Error fetching matches:', error);\n      throw error;\n    }\n  }\n  /**\n   * Returns the leaderboard in a form of a list of JSON objecs.\n   * \n   * [     \n   *      {\n   *          teamName: [STRING]',\n   *          matchesPlayed: [INTEGER],\n   *          goalsFor: [INTEGER],\n   *          goalsAgainst: [INTEGER],\n   *          points: [INTEGER]     \n   *      },      \n   * ]       \n   * \n   * @returns {Array} List of teams representing the leaderboard.\n   */\n\n\n  async getLeaderboard() {\n    try {\n      const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch leaderboard');\n      }\n\n      const data = await response.json(); // Inicializa um objeto para armazenar as estatísticas das equipes\n\n      const teams = {}; // Mapeia os dados de partidas para o formato especificado\n\n      data.matches.forEach(match => {\n        this.updateTeamStats(teams, match.homeTeam, match.matchPlayed, match.homeTeamScore, match.awayTeamScore);\n        this.updateTeamStats(teams, match.awayTeam, match.matchPlayed, match.awayTeamScore, match.homeTeamScore);\n      }); // Converte o objeto de equipes em uma matriz e a ordena por pontos\n\n      const leaderboard = Object.values(teams).sort((a, b) => b.points - a.points);\n      return leaderboard;\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n      throw error;\n    }\n  }\n\n  updateTeamStats(teams, teamName, matchesPlayed, goalsFor, goalsAgainst, points) {\n    teams[teamName] = teams[teamName] || {\n      teamName,\n      matchesPlayed: 0,\n      goalsFor: 0,\n      goalsAgainst: 0,\n      goalDifference: 0,\n      // Adiciona a nova estatística: Diferença de Gols (GD)\n      points: 0\n    };\n    const team = teams[teamName];\n    team.matchesPlayed += matchesPlayed;\n    team.goalsFor += goalsFor;\n    team.goalsAgainst += goalsAgainst;\n    team.goalDifference = team.goalsFor - team.goalsAgainst; // Calcula a diferença de gols (GD)\n\n    team.points += points;\n  }\n  /**\n   * Asynchronic function to fetch the data from the server.\n   */\n\n\n  async fetchData() {\n    try {\n      await Promise.all([this.getMatches(), this.getLeaderboard()]);\n      console.log('Data fetched successfully');\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      throw error;\n    }\n  }\n\n}\n\nexport default LeagueService;","map":{"version":3,"names":["LeagueService","constructor","apiUrl","token","setMatches","matches","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","getMatches","data","json","getLeaderboard","teams","forEach","match","updateTeamStats","homeTeam","matchPlayed","homeTeamScore","awayTeamScore","awayTeam","leaderboard","Object","values","sort","a","b","points","teamName","matchesPlayed","goalsFor","goalsAgainst","goalDifference","team","fetchData","Promise","all","log"],"sources":["/Users/cristianoribeiro/CODE/cristiano-ribeiro-cXXv-sports-league-web-ui-Z2zA/src/services/LeagueService.js"],"sourcesContent":["/**\n * A class representing a service that processes the data for match schedule\n * and generates leaderboard.\n * \n * NOTE: MAKE SURE TO IMPLEMENT ALL EXISITNG METHODS BELOW WITHOUT CHANGING THE INTERFACE OF THEM, \n *       AND PLEASE DO NOT RENAME, MOVE OR DELETE THIS FILE.  \n * \n *       ADDITIONALLY, MAKE SURE THAT ALL LIBRARIES USED IN THIS FILE FILE ARE COMPATIBLE WITH PURE JAVASCRIPT\n * \n */\nclass LeagueService {\n\n    constructor(apiUrl, token) {\n        this.apiUrl = apiUrl;\n        this.token = token;\n    }\n\n    /**\n     * Sets the match schedule.\n     * Match schedule will be given in the following form:\n     * [\n     *      {\n     *          matchDate: [TIMESTAMP],\n     *          stadium: [STRING],\n     *          homeTeam: [STRING],\n     *          awayTeam: [STRING],\n     *          matchPlayed: [BOOLEAN],\n     *          homeTeamScore: [INTEGER],\n     *          awayTeamScore: [INTEGER]\n     *      },\n     *      {\n     *          matchDate: [TIMESTAMP],\n     *          stadium: [STRING],\n     *          homeTeam: [STRING],\n     *          awayTeam: [STRING],\n     *          matchPlayed: [BOOLEAN],\n     *          homeTeamScore: [INTEGER],\n     *          awayTeamScore: [INTEGER]\n     *      }    \n     * ]\n     * \n     * @param {Array} matches List of matches.\n     */\n    async setMatches(matches) {\n        try {\n            const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.token}`\n                },\n                body: JSON.stringify(matches)\n            });\n            if (!response.ok) {\n                throw new Error('Failed to set matches');\n            }\n        } catch (error) {\n            console.error('Error setting matches:', error);\n            throw error;\n        }\n    }\n    /**\n     * Returns the full list of matches.\n     * \n     * @returns {Array} List of matches.\n     */\n    async getMatches() {\n        try {\n            const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n                headers: {\n                    'Authorization': `Bearer ${this.token}`\n                }\n            });\n            if (!response.ok) {\n                throw new Error('Failed to fetch matches');\n            }\n            const data = await response.json();\n            return data.matches;\n        } catch (error) {\n            console.error('Error fetching matches:', error);\n            throw error;\n        }\n    }\n    /**\n     * Returns the leaderboard in a form of a list of JSON objecs.\n     * \n     * [     \n     *      {\n     *          teamName: [STRING]',\n     *          matchesPlayed: [INTEGER],\n     *          goalsFor: [INTEGER],\n     *          goalsAgainst: [INTEGER],\n     *          points: [INTEGER]     \n     *      },      \n     * ]       \n     * \n     * @returns {Array} List of teams representing the leaderboard.\n     */\n    async getLeaderboard() {\n        try {\n            const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n                headers: {\n                    'Authorization': `Bearer ${this.token}`\n                }\n            });\n            if (!response.ok) {\n                throw new Error('Failed to fetch leaderboard');\n            }\n            const data = await response.json();\n\n            // Inicializa um objeto para armazenar as estatísticas das equipes\n            const teams = {};\n\n            // Mapeia os dados de partidas para o formato especificado\n            data.matches.forEach(match => {\n                this.updateTeamStats(teams, match.homeTeam, match.matchPlayed, match.homeTeamScore, match.awayTeamScore);\n                this.updateTeamStats(teams, match.awayTeam, match.matchPlayed, match.awayTeamScore, match.homeTeamScore);\n            });\n\n            // Converte o objeto de equipes em uma matriz e a ordena por pontos\n            const leaderboard = Object.values(teams).sort((a, b) => b.points - a.points);\n\n            return leaderboard;\n        } catch (error) {\n            console.error('Error fetching leaderboard:', error);\n            throw error;\n        }\n    }\n\n    updateTeamStats(teams, teamName, matchesPlayed, goalsFor, goalsAgainst, points) {\n        teams[teamName] = teams[teamName] || {\n            teamName,\n            matchesPlayed: 0,\n            goalsFor: 0,\n            goalsAgainst: 0,\n            goalDifference: 0, // Adiciona a nova estatística: Diferença de Gols (GD)\n            points: 0\n        };\n\n        const team = teams[teamName];\n        team.matchesPlayed += matchesPlayed;\n        team.goalsFor += goalsFor;\n        team.goalsAgainst += goalsAgainst;\n        team.goalDifference = team.goalsFor - team.goalsAgainst; // Calcula a diferença de gols (GD)\n        team.points += points;\n    }\n    /**\n     * Asynchronic function to fetch the data from the server.\n     */\n    async fetchData() {\n        try {\n            await Promise.all([this.getMatches(), this.getLeaderboard()]);\n            console.log('Data fetched successfully');\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            throw error;\n        }\n    }\n}\n\nexport default LeagueService;"],"mappings":"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"},"metadata":{},"sourceType":"module"}