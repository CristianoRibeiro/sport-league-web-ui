{"ast":null,"code":"/**\n * A class representing a service that processes the data for match schedule\n * and generates leaderboard.\n * \n * NOTE: MAKE SURE TO IMPLEMENT ALL EXISITNG METHODS BELOW WITHOUT CHANGING THE INTERFACE OF THEM, \n *       AND PLEASE DO NOT RENAME, MOVE OR DELETE THIS FILE.  \n * \n *       ADDITIONALLY, MAKE SURE THAT ALL LIBRARIES USED IN THIS FILE FILE ARE COMPATIBLE WITH PURE JAVASCRIPT\n * \n */\nclass LeagueService {\n  constructor(apiUrl, token) {\n    this.apiUrl = apiUrl;\n    this.token = token;\n  }\n  /**\n   * Sets the match schedule.\n   * Match schedule will be given in the following form:\n   * [\n   *      {\n   *          matchDate: [TIMESTAMP],\n   *          stadium: [STRING],\n   *          homeTeam: [STRING],\n   *          awayTeam: [STRING],\n   *          matchPlayed: [BOOLEAN],\n   *          homeTeamScore: [INTEGER],\n   *          awayTeamScore: [INTEGER]\n   *      },\n   *      {\n   *          matchDate: [TIMESTAMP],\n   *          stadium: [STRING],\n   *          homeTeam: [STRING],\n   *          awayTeam: [STRING],\n   *          matchPlayed: [BOOLEAN],\n   *          homeTeamScore: [INTEGER],\n   *          awayTeamScore: [INTEGER]\n   *      }    \n   * ]\n   * \n   * @param {Array} matches List of matches.\n   */\n\n\n  async setMatches(matches) {\n    try {\n      const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(matches)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to set matches');\n      }\n    } catch (error) {\n      console.error('Error setting matches:', error);\n      throw error;\n    }\n  }\n  /**\n   * Returns the full list of matches.\n   * \n   * @returns {Array} List of matches.\n   */\n\n\n  async getMatches() {\n    try {\n      const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch matches');\n      }\n\n      const data = await response.json();\n      return data.matches;\n    } catch (error) {\n      console.error('Error fetching matches:', error);\n      throw error;\n    }\n  }\n  /**\n   * Returns the leaderboard in a form of a list of JSON objecs.\n   * \n   * [     \n   *      {\n   *          teamName: [STRING]',\n   *          matchesPlayed: [INTEGER],\n   *          goalsFor: [INTEGER],\n   *          goalsAgainst: [INTEGER],\n   *          points: [INTEGER]     \n   *      },      \n   * ]       \n   * \n   * @returns {Array} List of teams representing the leaderboard.\n   */\n\n\n  async getLeaderboard() {\n    try {\n      // Obter os dados das partidas\n      const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch leaderboard');\n      }\n\n      const matches = await response.json(); // Mapear os dados das partidas para o formato de leaderboard\n\n      const leaderboard = this.mapMatchesToLeaderboard(matches);\n      return leaderboard;\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n      throw error;\n    }\n  }\n\n  mapMatchesToLeaderboard(matches) {\n    const leaderboard = {}; // Itera sobre cada partida\n\n    matches.forEach(match => {\n      // Verifica se o time da casa já está no leaderboard\n      if (!leaderboard[match.homeTeam]) {\n        // Se não estiver, cria um novo objeto para o time da casa\n        leaderboard[match.homeTeam] = {\n          teamName: match.homeTeam,\n          matchesPlayed: 0,\n          goalsFor: 0,\n          goalsAgainst: 0,\n          points: 0\n        };\n      } // Verifica se o time visitante já está no leaderboard\n\n\n      if (!leaderboard[match.awayTeam]) {\n        // Se não estiver, cria um novo objeto para o time visitante\n        leaderboard[match.awayTeam] = {\n          teamName: match.awayTeam,\n          matchesPlayed: 0,\n          goalsFor: 0,\n          goalsAgainst: 0,\n          points: 0\n        };\n      } // Atualiza as estatísticas do time da casa\n\n\n      leaderboard[match.homeTeam].matchesPlayed++;\n      leaderboard[match.homeTeam].goalsFor += match.homeTeamScore;\n      leaderboard[match.homeTeam].goalsAgainst += match.awayTeamScore;\n\n      if (match.homeTeamScore > match.awayTeamScore) {\n        leaderboard[match.homeTeam].points += 3; // Vitória\n      } else if (match.homeTeamScore === match.awayTeamScore) {\n        leaderboard[match.homeTeam].points += 1; // Empate\n      } // Atualiza as estatísticas do time visitante\n\n\n      leaderboard[match.awayTeam].matchesPlayed++;\n      leaderboard[match.awayTeam].goalsFor += match.awayTeamScore;\n      leaderboard[match.awayTeam].goalsAgainst += match.homeTeamScore;\n\n      if (match.awayTeamScore > match.homeTeamScore) {\n        leaderboard[match.awayTeam].points += 3; // Vitória\n      } else if (match.awayTeamScore === match.homeTeamScore) {\n        leaderboard[match.awayTeam].points += 1; // Empate\n      }\n    }); // Converte o objeto de leaderboard em uma lista de objetos\n\n    const leaderboardList = Object.values(leaderboard); // Ordena a lista pelo número de pontos em ordem decrescente\n\n    leaderboardList.sort((a, b) => b.points - a.points);\n    return leaderboardList;\n  }\n  /**\n   * Asynchronic function to fetch the data from the server.\n   */\n\n\n  async fetchData() {\n    try {\n      await Promise.all([this.getMatches(), this.getLeaderboard()]);\n      console.log('Data fetched successfully');\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      throw error;\n    }\n  }\n\n}\n\nexport default LeagueService;","map":{"version":3,"names":["LeagueService","constructor","apiUrl","token","setMatches","matches","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","getMatches","data","json","getLeaderboard","leaderboard","mapMatchesToLeaderboard","forEach","match","homeTeam","teamName","matchesPlayed","goalsFor","goalsAgainst","points","awayTeam","homeTeamScore","awayTeamScore","leaderboardList","Object","values","sort","a","b","fetchData","Promise","all","log"],"sources":["/Users/cristianoribeiro/CODE/cristiano-ribeiro-cXXv-sports-league-web-ui-Z2zA/src/services/LeagueService.js"],"sourcesContent":["/**\n * A class representing a service that processes the data for match schedule\n * and generates leaderboard.\n * \n * NOTE: MAKE SURE TO IMPLEMENT ALL EXISITNG METHODS BELOW WITHOUT CHANGING THE INTERFACE OF THEM, \n *       AND PLEASE DO NOT RENAME, MOVE OR DELETE THIS FILE.  \n * \n *       ADDITIONALLY, MAKE SURE THAT ALL LIBRARIES USED IN THIS FILE FILE ARE COMPATIBLE WITH PURE JAVASCRIPT\n * \n */\nclass LeagueService {\n\n    constructor(apiUrl, token) {\n        this.apiUrl = apiUrl;\n        this.token = token;\n    }\n\n    /**\n     * Sets the match schedule.\n     * Match schedule will be given in the following form:\n     * [\n     *      {\n     *          matchDate: [TIMESTAMP],\n     *          stadium: [STRING],\n     *          homeTeam: [STRING],\n     *          awayTeam: [STRING],\n     *          matchPlayed: [BOOLEAN],\n     *          homeTeamScore: [INTEGER],\n     *          awayTeamScore: [INTEGER]\n     *      },\n     *      {\n     *          matchDate: [TIMESTAMP],\n     *          stadium: [STRING],\n     *          homeTeam: [STRING],\n     *          awayTeam: [STRING],\n     *          matchPlayed: [BOOLEAN],\n     *          homeTeamScore: [INTEGER],\n     *          awayTeamScore: [INTEGER]\n     *      }    \n     * ]\n     * \n     * @param {Array} matches List of matches.\n     */\n    async setMatches(matches) {\n        try {\n            const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.token}`\n                },\n                body: JSON.stringify(matches)\n            });\n            if (!response.ok) {\n                throw new Error('Failed to set matches');\n            }\n        } catch (error) {\n            console.error('Error setting matches:', error);\n            throw error;\n        }\n    }\n    /**\n     * Returns the full list of matches.\n     * \n     * @returns {Array} List of matches.\n     */\n    async getMatches() {\n        try {\n            const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n                headers: {\n                    'Authorization': `Bearer ${this.token}`\n                }\n            });\n            if (!response.ok) {\n                throw new Error('Failed to fetch matches');\n            }\n            const data = await response.json();\n            return data.matches;\n        } catch (error) {\n            console.error('Error fetching matches:', error);\n            throw error;\n        }\n    }\n    /**\n     * Returns the leaderboard in a form of a list of JSON objecs.\n     * \n     * [     \n     *      {\n     *          teamName: [STRING]',\n     *          matchesPlayed: [INTEGER],\n     *          goalsFor: [INTEGER],\n     *          goalsAgainst: [INTEGER],\n     *          points: [INTEGER]     \n     *      },      \n     * ]       \n     * \n     * @returns {Array} List of teams representing the leaderboard.\n     */\n    async getLeaderboard() {\n        try {\n            // Obter os dados das partidas\n            const response = await fetch(`${this.apiUrl}/getAllMatches`, {\n                headers: {\n                    'Authorization': `Bearer ${this.token}`\n                }\n            });\n            if (!response.ok) {\n                throw new Error('Failed to fetch leaderboard');\n            }\n            const matches = await response.json();\n    \n            // Mapear os dados das partidas para o formato de leaderboard\n            const leaderboard = this.mapMatchesToLeaderboard(matches);\n    \n            return leaderboard;\n        } catch (error) {\n            console.error('Error fetching leaderboard:', error);\n            throw error;\n        }\n    }\n    \n    mapMatchesToLeaderboard(matches) {\n        const leaderboard = {};\n    \n        // Itera sobre cada partida\n        matches.forEach(match => {\n            // Verifica se o time da casa já está no leaderboard\n            if (!leaderboard[match.homeTeam]) {\n                // Se não estiver, cria um novo objeto para o time da casa\n                leaderboard[match.homeTeam] = {\n                    teamName: match.homeTeam,\n                    matchesPlayed: 0,\n                    goalsFor: 0,\n                    goalsAgainst: 0,\n                    points: 0\n                };\n            }\n    \n            // Verifica se o time visitante já está no leaderboard\n            if (!leaderboard[match.awayTeam]) {\n                // Se não estiver, cria um novo objeto para o time visitante\n                leaderboard[match.awayTeam] = {\n                    teamName: match.awayTeam,\n                    matchesPlayed: 0,\n                    goalsFor: 0,\n                    goalsAgainst: 0,\n                    points: 0\n                };\n            }\n    \n            // Atualiza as estatísticas do time da casa\n            leaderboard[match.homeTeam].matchesPlayed++;\n            leaderboard[match.homeTeam].goalsFor += match.homeTeamScore;\n            leaderboard[match.homeTeam].goalsAgainst += match.awayTeamScore;\n            if (match.homeTeamScore > match.awayTeamScore) {\n                leaderboard[match.homeTeam].points += 3; // Vitória\n            } else if (match.homeTeamScore === match.awayTeamScore) {\n                leaderboard[match.homeTeam].points += 1; // Empate\n            }\n    \n            // Atualiza as estatísticas do time visitante\n            leaderboard[match.awayTeam].matchesPlayed++;\n            leaderboard[match.awayTeam].goalsFor += match.awayTeamScore;\n            leaderboard[match.awayTeam].goalsAgainst += match.homeTeamScore;\n            if (match.awayTeamScore > match.homeTeamScore) {\n                leaderboard[match.awayTeam].points += 3; // Vitória\n            } else if (match.awayTeamScore === match.homeTeamScore) {\n                leaderboard[match.awayTeam].points += 1; // Empate\n            }\n        });\n    \n        // Converte o objeto de leaderboard em uma lista de objetos\n        const leaderboardList = Object.values(leaderboard);\n    \n        // Ordena a lista pelo número de pontos em ordem decrescente\n        leaderboardList.sort((a, b) => b.points - a.points);\n    \n        return leaderboardList;\n    }\n    \n    /**\n     * Asynchronic function to fetch the data from the server.\n     */\n    async fetchData() {\n        try {\n            await Promise.all([this.getMatches(), this.getLeaderboard()]);\n            console.log('Data fetched successfully');\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            throw error;\n        }\n    }\n}\n\nexport default LeagueService;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAN,CAAoB;EAEhBC,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgB;IACvB,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACoB,MAAVC,UAAU,CAACC,OAAD,EAAU;IACtB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,MAAO,gBAAhB,EAAiC;QACzDM,MAAM,EAAE,MADiD;QAEzDC,OAAO,EAAE;UACL,gBAAgB,kBADX;UAEL,iBAAkB,UAAS,KAAKN,KAAM;QAFjC,CAFgD;QAMzDO,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,OAAf;MANmD,CAAjC,CAA5B;;MAQA,IAAI,CAACC,QAAQ,CAACO,EAAd,EAAkB;QACd,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;MACH;IACJ,CAZD,CAYE,OAAOC,KAAP,EAAc;MACZC,OAAO,CAACD,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;MACA,MAAMA,KAAN;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACoB,MAAVE,UAAU,GAAG;IACf,IAAI;MACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,MAAO,gBAAhB,EAAiC;QACzDO,OAAO,EAAE;UACL,iBAAkB,UAAS,KAAKN,KAAM;QADjC;MADgD,CAAjC,CAA5B;;MAKA,IAAI,CAACG,QAAQ,CAACO,EAAd,EAAkB;QACd,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;MACH;;MACD,MAAMI,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAT,EAAnB;MACA,OAAOD,IAAI,CAACb,OAAZ;IACH,CAXD,CAWE,OAAOU,KAAP,EAAc;MACZC,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;MACA,MAAMA,KAAN;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACwB,MAAdK,cAAc,GAAG;IACnB,IAAI;MACA;MACA,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,MAAO,gBAAhB,EAAiC;QACzDO,OAAO,EAAE;UACL,iBAAkB,UAAS,KAAKN,KAAM;QADjC;MADgD,CAAjC,CAA5B;;MAKA,IAAI,CAACG,QAAQ,CAACO,EAAd,EAAkB;QACd,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;MACH;;MACD,MAAMT,OAAO,GAAG,MAAMC,QAAQ,CAACa,IAAT,EAAtB,CAVA,CAYA;;MACA,MAAME,WAAW,GAAG,KAAKC,uBAAL,CAA6BjB,OAA7B,CAApB;MAEA,OAAOgB,WAAP;IACH,CAhBD,CAgBE,OAAON,KAAP,EAAc;MACZC,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;MACA,MAAMA,KAAN;IACH;EACJ;;EAEDO,uBAAuB,CAACjB,OAAD,EAAU;IAC7B,MAAMgB,WAAW,GAAG,EAApB,CAD6B,CAG7B;;IACAhB,OAAO,CAACkB,OAAR,CAAgBC,KAAK,IAAI;MACrB;MACA,IAAI,CAACH,WAAW,CAACG,KAAK,CAACC,QAAP,CAAhB,EAAkC;QAC9B;QACAJ,WAAW,CAACG,KAAK,CAACC,QAAP,CAAX,GAA8B;UAC1BC,QAAQ,EAAEF,KAAK,CAACC,QADU;UAE1BE,aAAa,EAAE,CAFW;UAG1BC,QAAQ,EAAE,CAHgB;UAI1BC,YAAY,EAAE,CAJY;UAK1BC,MAAM,EAAE;QALkB,CAA9B;MAOH,CAXoB,CAarB;;;MACA,IAAI,CAACT,WAAW,CAACG,KAAK,CAACO,QAAP,CAAhB,EAAkC;QAC9B;QACAV,WAAW,CAACG,KAAK,CAACO,QAAP,CAAX,GAA8B;UAC1BL,QAAQ,EAAEF,KAAK,CAACO,QADU;UAE1BJ,aAAa,EAAE,CAFW;UAG1BC,QAAQ,EAAE,CAHgB;UAI1BC,YAAY,EAAE,CAJY;UAK1BC,MAAM,EAAE;QALkB,CAA9B;MAOH,CAvBoB,CAyBrB;;;MACAT,WAAW,CAACG,KAAK,CAACC,QAAP,CAAX,CAA4BE,aAA5B;MACAN,WAAW,CAACG,KAAK,CAACC,QAAP,CAAX,CAA4BG,QAA5B,IAAwCJ,KAAK,CAACQ,aAA9C;MACAX,WAAW,CAACG,KAAK,CAACC,QAAP,CAAX,CAA4BI,YAA5B,IAA4CL,KAAK,CAACS,aAAlD;;MACA,IAAIT,KAAK,CAACQ,aAAN,GAAsBR,KAAK,CAACS,aAAhC,EAA+C;QAC3CZ,WAAW,CAACG,KAAK,CAACC,QAAP,CAAX,CAA4BK,MAA5B,IAAsC,CAAtC,CAD2C,CACF;MAC5C,CAFD,MAEO,IAAIN,KAAK,CAACQ,aAAN,KAAwBR,KAAK,CAACS,aAAlC,EAAiD;QACpDZ,WAAW,CAACG,KAAK,CAACC,QAAP,CAAX,CAA4BK,MAA5B,IAAsC,CAAtC,CADoD,CACX;MAC5C,CAjCoB,CAmCrB;;;MACAT,WAAW,CAACG,KAAK,CAACO,QAAP,CAAX,CAA4BJ,aAA5B;MACAN,WAAW,CAACG,KAAK,CAACO,QAAP,CAAX,CAA4BH,QAA5B,IAAwCJ,KAAK,CAACS,aAA9C;MACAZ,WAAW,CAACG,KAAK,CAACO,QAAP,CAAX,CAA4BF,YAA5B,IAA4CL,KAAK,CAACQ,aAAlD;;MACA,IAAIR,KAAK,CAACS,aAAN,GAAsBT,KAAK,CAACQ,aAAhC,EAA+C;QAC3CX,WAAW,CAACG,KAAK,CAACO,QAAP,CAAX,CAA4BD,MAA5B,IAAsC,CAAtC,CAD2C,CACF;MAC5C,CAFD,MAEO,IAAIN,KAAK,CAACS,aAAN,KAAwBT,KAAK,CAACQ,aAAlC,EAAiD;QACpDX,WAAW,CAACG,KAAK,CAACO,QAAP,CAAX,CAA4BD,MAA5B,IAAsC,CAAtC,CADoD,CACX;MAC5C;IACJ,CA5CD,EAJ6B,CAkD7B;;IACA,MAAMI,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAcf,WAAd,CAAxB,CAnD6B,CAqD7B;;IACAa,eAAe,CAACG,IAAhB,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACT,MAAF,GAAWQ,CAAC,CAACR,MAA5C;IAEA,OAAOI,eAAP;EACH;EAED;AACJ;AACA;;;EACmB,MAATM,SAAS,GAAG;IACd,IAAI;MACA,MAAMC,OAAO,CAACC,GAAR,CAAY,CAAC,KAAKzB,UAAL,EAAD,EAAoB,KAAKG,cAAL,EAApB,CAAZ,CAAN;MACAJ,OAAO,CAAC2B,GAAR,CAAY,2BAAZ;IACH,CAHD,CAGE,OAAO5B,KAAP,EAAc;MACZC,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;MACA,MAAMA,KAAN;IACH;EACJ;;AArLe;;AAwLpB,eAAef,aAAf"},"metadata":{},"sourceType":"module"}